// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Simple_BackEndAPI.Models
{
    public partial class UserContext : DbContext
    {
        public UserContext()
        {
        }

        public UserContext(DbContextOptions<UserContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Identification_Type> Identification_Types { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Notification_Type> Notification_Types { get; set; }
        public virtual DbSet<Participant> Participants { get; set; }
        public virtual DbSet<Participants_Type> Participants_Types { get; set; }
        public virtual DbSet<Payment_Type> Payment_Types { get; set; }
        public virtual DbSet<Pending_Transaction> Pending_Transactions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Users_Type> Users_Types { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasKey(e => e.Cliente_Id)
                    .HasName("PK_Clientes");

                entity.Property(e => e.CountryCode).HasColumnType("numeric(3, 0)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Identification_Number)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastNames)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MiddleName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PhoneNumber).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.Country_Id)
                    .HasName("PK_Paises");

                entity.Property(e => e.Country_Id).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Identification_Type>(entity =>
            {
                entity.HasKey(e => e.Identification_Id);

                entity.ToTable("Identification_Type");

                entity.Property(e => e.Identification_Format)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Identification_type1)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("Identification_type")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasKey(e => e.Log_Id);

                entity.Property(e => e.Date_Log)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Notification_Type>(entity =>
            {
                entity.HasKey(e => e.Notification_Id);

                entity.ToTable("Notification_Type");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Participant>(entity =>
            {
                entity.HasKey(e => e.Part_Id)
                    .HasName("PK_Participantes");

                entity.Property(e => e.Part_Id).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Participants_Type>(entity =>
            {
                entity.HasKey(e => e.Ptype_Id)
                    .HasName("PK_Participantes_Tipo");

                entity.ToTable("Participants_Type");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Payment_Type>(entity =>
            {
                entity.HasKey(e => e.Payment_Id);

                entity.ToTable("Payment_Type");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Pending_Transaction>(entity =>
            {
                entity.HasKey(e => e.Trns_Id);

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Customer_Notification_Status).HasComment("0= pendiente,1 enviado,2 error.");

                entity.Property(e => e.Pay_Status).HasComment("0= pendiente,1 enviado,2 error.");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.User_Id)
                    .HasName("PK_Usuarios");

                entity.Property(e => e.User_Id).ValueGeneratedNever();

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Users_Type>(entity =>
            {
                entity.HasKey(e => e.Utipo_Id)
                    .HasName("PK_Usuarios_Tipo");

                entity.ToTable("Users_Type");

                entity.Property(e => e.Utipo_Id).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}